// +build go1.8

package xmpp

import (
	"crypto/tls"
	"io"

	"github.com/coyim/coyim/xmpp/data"
	. "gopkg.in/check.v1"
)

func expectedStartTLSHandshakeFailure() []byte {
	return []byte{
		0x16, 0x3, 0x1, 0x0, 0x94, 0x1, 0x0, 0x0,
		0x90, 0x3, 0x3, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc,
		0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c,
		0x1d, 0x1e, 0x1f, 0x0, 0x0, 0x20,
		//0xc0, 0x2f, 0xc0, 0x30, 0xc0, 0x2b, 0xc0, 0x2c, 0xcc, 0xa8, 0xcc, 0xa9, // this is 1.8
		//0xcc, 0xa8, 0xcc, 0xa9, 0xc0, 0x2f, 0xc0, 0x30, 0xc0, 0x2b, 0xc0, 0x2c, // this in 1.9
		0xc0, 0x13, 0xc0, 0x9, 0xc0, 0x14, 0xc0, 0xa, 0x0, 0x9c, 0x0, 0x9d, 0x0, 0x2f,
		0x0, 0x35, 0xc0, 0x12, 0x0, 0xa, 0x1, 0x0, 0x0, 0x47, 0x0, 0x0, 0x0, 0xb, 0x0, 0x9,
		0x0, 0x0, 0x6, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x0, 0x5, 0x0, 0x5, 0x1, 0x0, 0x0,
		0x0, 0x0, 0x0, 0xa, 0x0, 0xa, 0x0, 0x8, 0x0, 0x1d, 0x0, 0x17, 0x0, 0x18, 0x0, 0x19,
		0x0, 0xb, 0x0, 0x2, 0x1, 0x0, 0x0, 0xd, 0x0, 0xe, 0x0, 0xc, 0x4, 0x1, 0x4, 0x3,
		0x5, 0x1, 0x5, 0x3, 0x2, 0x1, 0x2, 0x3, 0xff, 0x1, 0x0, 0x1, 0x0, 0x0, 0x12, 0x0, 0x0,
	}
}

func (s *ConnectionXMPPSuite) Test_Dial_failsWhenStartingAHandshake(c *C) {
	rw := &mockConnIOReaderWriter{read: []byte(
		"<?xml version='1.0'?>" +
			"<str:stream xmlns:str='http://etherx.jabber.org/streams' version='1.0'>" +
			"<str:features>" +
			"<starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'>" +
			"</starttls>" +
			"<mechanisms xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>" +
			"<mechanism>PLAIN</mechanism>" +
			"</mechanisms>" +
			"</str:features>" +
			"<proceed xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>",
	)}
	conn := &fullMockedConn{rw: rw}
	var tlsC tls.Config
	tlsC.Rand = fixedRand([]string{"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"})

	d := &dialer{
		JID:      "user@domain",
		password: "pass",
		config: data.Config{
			TLSConfig: &tlsC,
		},
	}
	_, err := d.setupStream(conn)

	c.Assert(err, Equals, io.EOF)

	expectedXmppHeader := "<?xml version='1.0'?>" +
		"<stream:stream to='domain' xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'>\n" +
		"<starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>"

	expected := expectedStartTLSHandshakeFailure()
	c.Assert(len(rw.write), Equals, 337)
	c.Assert(string(rw.write[:len(expectedXmppHeader)]), Equals, expectedXmppHeader)
	// I know first 46 are OK
	c.Assert(rw.write[len(expectedXmppHeader):][:46], DeepEquals, expected[:46])
	// Skips 12
	c.Assert(rw.write[len(expectedXmppHeader):][46:][12:], DeepEquals, expected[46:])
}

func (s *ConnectionXMPPSuite) Test_Dial_worksIfTheHandshakeSucceeds(c *C) {
	rw := &mockMultiConnIOReaderWriter{read: validTLSExchange}
	conn := &fullMockedConn{rw: rw}
	var tlsC tls.Config
	tlsC.Rand = fixedRand([]string{
		"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F",
		"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F",
		"000102030405060708090A0B0C0D0E0F",
		"000102030405060708090A0B0C0D0E0F",
	})

	d := &dialer{
		JID:           "user@www.olabini.se",
		password:      "pass",
		serverAddress: "www.olabini.se:443",
		verifier:      &basicTLSVerifier{},

		config: data.Config{
			TLSConfig: &tlsC,
		},
	}
	_, err := d.setupStream(conn)

	c.Assert(err.Error(), Equals, "tls: server's Finished message was incorrect")
	expectedXmppHeader := "<?xml version='1.0'?>" +
		"<stream:stream to='www.olabini.se' xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'>\n" +
		"<starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>"

	expected := []byte{
		0x16, 0x3, 0x1, 0x0, 0x9c, 0x1, 0x0, 0x0,
		0x98, 0x3, 0x3, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc,
		0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c,
		0x1d, 0x1e, 0x1f, 0x0, 0x0, 0x20, 0xcc, 0xa8, 0xcc, 0xa9, 0xc0, 0x2f, 0xc0, 0x30, 0xc0, 0x2b,
		0xc0, 0x2c, 0xc0, 0x13, 0xc0, 0x9, 0xc0, 0x14, 0xc0, 0xa, 0x0, 0x9c, 0x0, 0x9d, 0x0, 0x2f,
		0x0, 0x35, 0xc0, 0x12, 0x0, 0xa, 0x1, 0x0, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x13, 0x0, 0x11,
		0x0, 0x0, 0xe, 0x77, 0x77, 0x77, 0x2e, 0x6f, 0x6c, 0x61, 0x62, 0x69, 0x6e, 0x69, 0x2e, 0x73,
		0x65, 0x0, 0x5, 0x0, 0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0xa, 0x0, 0x8,
		0x0, 0x1d, 0x0, 0x17, 0x0, 0x18, 0x0, 0x19, 0x0, 0xb, 0x0, 0x2, 0x1, 0x0, 0x0, 0xd,
		0x0, 0xe, 0x0, 0xc, 0x4, 0x1, 0x4, 0x3, 0x5, 0x1, 0x5, 0x3, 0x2, 0x1, 0x2, 0x3, 0xff,
		0x1, 0x0, 0x1, 0x0, 0x0, 0x12, 0x0, 0x0,
		0x16, 0x3, 0x3, 0x0, 0x46, 0x10, 0x0, 0x0, 0x42, 0x41, 0x4, 0x8, 0xda, 0xf8, 0xb0, 0xab,
		0xae, 0x35, 0x9, 0xf3, 0x5c, 0xe1, 0xd3, 0x31, 0x4, 0xcb, 0x1, 0xb9, 0x51, 0x62, 0xcc, 0xb9,
		0x18, 0xba, 0x1f, 0x81, 0x6f, 0x38, 0xd3, 0x13, 0xf, 0xb8, 0x7f, 0x92, 0xa3, 0x8, 0x37, 0xf8,
		0x6f, 0x9e, 0xef, 0x19, 0x7f, 0x43, 0x79, 0xa5, 0xa, 0x62, 0x6, 0x82, 0x66, 0x79, 0x5d, 0xb9,
		0xf8, 0x33, 0xea, 0x36, 0x1d, 0x3, 0xaf, 0x54, 0x5b, 0xe7, 0x92, 0x14, 0x3, 0x3, 0x0, 0x1,
		0x1, 0x16, 0x3, 0x3, 0x0, 0x28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0xc9,
		0xd4, 0xef, 0xb, 0x2e, 0x7e, 0xb5, 0x3f, 0xda, 0x44, 0x23, 0x71, 0xed, 0xf9, 0x3f, 0x7, 0xb8,
		0xcf, 0x46, 0x9c, 0xe8, 0xe8, 0xdc, 0xfa, 0x45, 0xe1, 0xc8, 0x30, 0xf4, 0x53, 0x35, 0x15, 0x3,
		0x3, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x69, 0x30, 0x31, 0x69, 0x98,
		0x49, 0x1a, 0x9e, 0x13, 0x4e, 0x4c, 0x9b, 0x33, 0x7, 0x10, 0xb9, 0xe0, 0xa5,
	}

	c.Assert(len(rw.write), Equals, len(expectedXmppHeader)+len(expected))
	c.Assert(string(rw.write[:len(expectedXmppHeader)]), Equals, expectedXmppHeader)
	// I know first 46 are OK
	c.Assert(rw.write[len(expectedXmppHeader):][:46], DeepEquals, expected[:46])
	// Skips 12
	c.Assert(rw.write[len(expectedXmppHeader):][46:][12:], DeepEquals, expected[46:][12:])
}

func (s *ConnectionXMPPSuite) Test_Dial_worksIfTheHandshakeSucceedsButFailsOnInvalidCertHash(c *C) {
	rw := &mockMultiConnIOReaderWriter{read: validTLSExchange}
	conn := &fullMockedConn{rw: rw}
	var tlsC tls.Config
	tlsC.Rand = fixedRand([]string{
		"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F",
		"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F",
		"000102030405060708090A0B0C0D0E0F",
		"000102030405060708090A0B0C0D0E0F",
	})

	d := &dialer{
		JID:           "user@www.olabini.se",
		password:      "pass",
		serverAddress: "www.olabini.se:443",
		verifier:      &basicTLSVerifier{[]byte("aaaaa")},

		config: data.Config{
			TLSConfig: &tlsC,
		},
	}
	_, err := d.setupStream(conn)

	c.Assert(err.Error(), Equals, "tls: server's Finished message was incorrect")
}

func (s *ConnectionXMPPSuite) Test_Dial_worksIfTheHandshakeSucceedsButSucceedsOnValidCertHash(c *C) {
	rw := &mockMultiConnIOReaderWriter{read: validTLSExchange}
	conn := &fullMockedConn{rw: rw}
	var tlsC tls.Config
	tlsC.Rand = fixedRand([]string{
		"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F",
		"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F",
		"000102030405060708090A0B0C0D0E0F",
		"000102030405060708090A0B0C0D0E0F",
	})

	d := &dialer{
		JID:           "user@www.olabini.se",
		password:      "pass",
		serverAddress: "www.olabini.se:443",
		verifier:      &basicTLSVerifier{bytesFromHex("82454418cb04854aa721bb0596528ff802b1e18a4e3a7767412ac9f108c9d3a7")},

		config: data.Config{
			TLSConfig: &tlsC,
		},
	}
	_, err := d.setupStream(conn)

	c.Assert(err.Error(), Equals, "tls: server's Finished message was incorrect")
}
